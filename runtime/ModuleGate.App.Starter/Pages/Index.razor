@layout MainLayout
@using ModuleGate.Services
@using ModuleGate.Abstractions
@inject NavigationManager uriHelper
@inject ModuleGateStorage storage
@inject INugetRepository nugetRepository
@using System.ComponentModel.DataAnnotations;
@using System.Text.Json;
@inject ReloadService reloadService
@page "/"

@{
    var exModules = storage.GetAllModules();
}


<Form Loading="loading" Model="@model"
      LabelColSpan="8"
      WrapperColSpan="16"
      OnFinish="OnFinish"
      OnFinishFailed="OnFinishFailed">
    <FormItem Label="Username">
        <Input @bind-Value="@context.Username" />
    </FormItem>
    <FormItem Label="Password">
        <InputPassword @bind-Value="@context.Password" />
    </FormItem>
    <FormItem WrapperColOffset="8" WrapperColSpan="16">
        <Checkbox @bind-Value="context.RememberMe">Remember me</Checkbox>
    </FormItem>
    <FormItem WrapperColOffset="8" WrapperColSpan="16">
        <Button Type="@ButtonType.Primary" HtmlType="submit">
            Submit
        </Button>
    </FormItem>
</Form>
<div style="margin-top: 16px">
    Loading state：
    <Switch Checked=loading OnChange=toggle />
</div>
<div style="margin-top: 16px">
    Loading state：
    <AntDesign.Switch Checked=loading OnChange=toggle />
</div>
<h3>Подключенные модули</h3>
@foreach (var module in exModules)
{
    <div>@($"{module.ModuleName}:{module.ModuleVersion}")</div>
}

<h3>Доступные для подключения</h3>

@if (packages != null)
{
    @foreach (var module in packages)
    {
        <button onclick="@(() => AddModule(module))">@(module.Value.Title)</button>
    }
}

<div>
    <p></p>
    <button onclick="@(() => Save())">Сохранить и перезапустить</button>

</div>

@code {

    public class Model
    {
        [Required]
        public string Username { get; set; }
        [Required]
        public string Password { get; set; }
        public bool RememberMe { get; set; } = true;
    }


    private void OnFinish(EditContext editContext)
    {
        Console.WriteLine($"Success:{JsonSerializer.Serialize(model)}");
    }

    private void OnFinishFailed(EditContext editContext)
    {
        Console.WriteLine($"Failed:{JsonSerializer.Serialize(model)}");
    }

    bool loading = false;
    private Model model = new Model();


    void toggle(bool value) => loading = value;
    private IEnumerable<ModuleGate.Models.PackageMetadata> packages;
    protected override async Task OnInitializedAsync()
    {
        packages = await nugetRepository
            .Search(new ModuleGate.Models.SearchPreferences() { NuGetSource = "http://49.12.227.30:555/v3/index.json" },
            new NuGet.Protocol.Core.Types.SearchFilter(true), null);


        base.OnInitialized();
    }

    private void AddModule(ModuleGate.Models.PackageMetadata package)
    {
        storage.AddModule(new Models.MgModuleMetadata
        {
            NugetSource = package.Source,
            ModuleName = package.Value.Identity.Id,
            ModuleVersion = package.Value.Identity.Version.ToFullString()
        });
        StateHasChanged();
    }

    private void Save()
    {
        storage.Save();
        reloadService.Reaload();

    }
}
