@inherits ProtoHandler<ProtoNavigation, List<IMenuItem>>
@using AntDesign

<div style=" width: 33rem; display: flex; align-items: center;">
    <label style="padding-right: 2rem;">@(Proto.DisplayName ?? "Навигация")</label>
    <Tree ShowIcon
          TItem="IMenuItem"
          MatchedClass="site-tree-search-value"
          DataSource="Model"
          TitleExpression="x => x.DataItem.Title"
          
          ChildrenExpression="GetChilds">

        <TitleTemplate>
            <div style="display:flex">
                <div>
                    <Button OnClick="() => AddElement(context)">+</Button>
                </div>
                <div style=" width: 20rem; padding-left: 1rem">
                    <Input TValue="string" Value="@context.DataItem.Title"
                           OnChange="p => ChangeTitleNode(context, p)" />
                </div>
                <div style=" width: 20rem; padding-left: 1rem">
                    <Input Placeholder="Ссылка" TValue="string" Value="@context.DataItem.Link.Value"
                           OnChange="p => ChangeLinkNode(context, p)" />
                </div>

                <div style="padding-left: 1rem">
                    @if (context.DataItem is ActionMenuItem action)
                    {
                        <Button OnClick="() => ToGroup(context)">в группу</Button>
                    }
                    else if (context.DataItem is GroupMenuItem group)
                    {
                        <Button OnClick="() => ToAction(context)">в элемент</Button>

                    }
                </div>
            </div>
        </TitleTemplate>
    </Tree>
</div>
<style>
    .site-tree-search-value {
        color: #f50;
    }
</style>
@code {

    protected override List<IMenuItem> NewModel => new List<IMenuItem>();

    protected IMenuItem GetParentFromItem(IMenuItem menuItem, GroupMenuItem root)
    {
        @foreach (var item in root.ChildItems)
        {
            if (item == menuItem)
            {
                return root;
            }

            if (item is GroupMenuItem group)
            {
                var result = GetParentFromItem(menuItem, group);

                if (result != null)
                    return result;
            }
        }

        return null;
    }

    protected List<IMenuItem> GetParentItemsFromItem(IMenuItem menuItem)
    {
        @foreach (var item in Model)
        {
            if (item == menuItem)
            {
                return Model;
            }

            if (item is GroupMenuItem group)
            {
                var result = GetParentFromItem(menuItem, group);

                if (result != null)
                    return (result as GroupMenuItem).ChildItems;
            }
        }

        return null;
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        if (Model.Any() == false)
        {
            Model.Add(new ActionMenuItem
            {
                Title = "название",
                Link = new ProtoLink { Value = "Ссылка" },
                Icon = ""
            });
        }
    }

    public void AddElement(TreeNode<IMenuItem> treeNode)
    {
        GetParentItemsFromItem(treeNode.DataItem)
            .Add(new ActionMenuItem
            {
                Title = treeNode.DataItem.Title,
                Link = treeNode.DataItem.Link,
                Icon = treeNode.DataItem.Icon
            });

        Input();
        StateHasChanged();

    }

    public IEnumerable<IMenuItem> GetChilds(TreeNode<IMenuItem> treeNode)
    {
        var group = (treeNode.DataItem as GroupMenuItem);
        if (group == null)
            return new List<IMenuItem>();

        if (group.ChildItems == null || group.ChildItems.Any() == false)
        {
            group.ChildItems = new List<IMenuItem>();

            return new List<IMenuItem>
                {
                        new ActionMenuItem
                        {
                            Title = treeNode.DataItem.Title,
                            Link = treeNode.DataItem.Link,
                            Icon = treeNode.DataItem.Icon
                        }
                    };
        }

        return group.ChildItems;
    }

    public void ToAction(TreeNode<IMenuItem> treeNode)
    {
        var list = GetParentItemsFromItem(treeNode.DataItem);

        var index = list.IndexOf(treeNode.DataItem);

        list[index] = new ActionMenuItem
        {
            Title = treeNode.DataItem.Title,
            Link = treeNode.DataItem.Link,
            Icon = treeNode.DataItem.Icon
        };
        Input();
        StateHasChanged();
    }


    public void ToGroup(TreeNode<IMenuItem> treeNode)
    {
        var list = GetParentItemsFromItem(treeNode.DataItem);

        var index = list.IndexOf(treeNode.DataItem);

        list[index] = new GroupMenuItem
        {
            Title = treeNode.DataItem.Title,
            Link = treeNode.DataItem.Link,
            Icon = treeNode.DataItem.Icon,
            ChildItems = new List<IMenuItem>()
            {
                new ActionMenuItem
                {
                        Title = treeNode.DataItem.Title,
                        Link = treeNode.DataItem.Link,
                        Icon = treeNode.DataItem.Icon
                }
            }
        };
        Input();
        StateHasChanged();
    }

    public void ChangeTitleNode(TreeNode<IMenuItem> node, string value)
    {
        node.DataItem.Title = value;
        Input();
        StateHasChanged();
    }

    public void ChangeLinkNode(TreeNode<IMenuItem> node, string value)
    {
        node.DataItem.Link = new ProtoLink { Value = value };
        Input();
        StateHasChanged();
    }
}
